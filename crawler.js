class ProfessionalWebCrawler {
    constructor() {
        this.visitedUrls = new Set();
        this.urlsToCrawl = new Set();
        this.failedUrls = new Set();
        this.isCrawling = false;
        this.isPaused = false;
        this.stats = {
            totalDiscovered: 0,
            successfullyCrawled: 0,
            failed: 0,
            duplicates: 0,
            external: 0
        };
        
        this.config = {
            maxPages: 500,
            delay: 200,
            usePuppeteer: true
        };
    }

    async startCrawling(startUrl) {
        if (!this.isValidUrl(startUrl)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL');
        }

        this.resetState();
        this.isCrawling = true;
        this.isPaused = false;
        
        const baseUrl = this.normalizeUrl(startUrl);
        this.urlsToCrawl.add(baseUrl);
        
        this.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫—Ä–∞—É–ª–µ—Ä–∞...', 'info');
        this.log(`üéØ –¶–µ–ª—å: ${baseUrl}`, 'info');
        this.log(`üìä –õ–∏–º–∏—Ç: ${this.config.maxPages} —Å—Ç—Ä–∞–Ω–∏—Ü`, 'info');

        try {
            await this.crawlAllPages(baseUrl);
            this.completeCrawling();
        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            this.stopCrawling();
        }
    }

    async crawlAllPages(baseUrl) {
        while (this.urlsToCrawl.size > 0 && 
               this.isCrawling && 
               this.visitedUrls.size < this.config.maxPages) {
            
            if (this.isPaused) {
                await this.delay(100);
                continue;
            }

            const currentUrl = Array.from(this.urlsToCrawl)[0];
            this.urlsToCrawl.delete(currentUrl);
            
            await this.crawlSinglePage(currentUrl, baseUrl);
            this.updateProgress();
            
            await this.delay(this.config.delay);
        }
    }

    async crawlSinglePage(url, baseUrl) {
        if (this.visitedUrls.has(url)) return;
        
        this.visitedUrls.add(url);
        this.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${url}`, 'crawl');

        try {
            let content, finalUrl;

            if (this.config.usePuppeteer && await this.isJavascriptSite(url)) {
                ({ content, finalUrl } = await this.fetchWithPuppeteer(url));
            } else {
                ({ content, finalUrl } = await this.fetchWithProxy(url));
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
            if (finalUrl !== url) {
                this.log(`üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç: ${url} ‚Üí ${finalUrl}`, 'redirect');
                this.stats.duplicates++;
            }

            this.stats.successfullyCrawled++;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏
            const newUrls = this.extractUrlsFromHtml(content, finalUrl || url);
            this.processNewUrls(newUrls, baseUrl);

        } catch (error) {
            this.log(`‚ùå –û—à–∏–±–∫–∞: ${url} - ${error.message}`, 'error');
            this.failedUrls.add(url);
            this.stats.failed++;
        }
    }

    async fetchWithProxy(url) {
        const proxies = [
            `https://corsproxy.io/?${encodeURIComponent(url)}`,
            `https://api.allorigins.win/raw?url=${encodeURIComponent(url)}`,
            `https://proxy.cors.sh/${url}`
        ];

        for (const proxyUrl of proxies) {
            try {
                const response = await fetch(proxyUrl, {
                    method: 'GET',
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (compatible; ProfessionalWebCrawler/1.0)',
                        'Accept': 'text/html,application/xhtml+xml,application/xml'
                    }
                });

                if (response.ok) {
                    const content = await response.text();
                    return { content, finalUrl: url };
                }
            } catch (error) {
                continue;
            }
        }
        
        throw new Error('–í—Å–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    async fetchWithPuppeteer(url) {
        // –≠–º—É–ª—è—Ü–∏—è Puppeteer —á–µ—Ä–µ–∑ iframe –∏ postMessage
        return new Promise((resolve, reject) => {
            const iframe = document.createElement('iframe');
            iframe.style.display = 'none';
            iframe.sandbox = 'allow-scripts allow-same-origin';
            iframe.srcdoc = `
                <html>
                <head>
                    <script>
                        window.addEventListener('message', async (event) => {
                            if (event.data.type === 'crawl') {
                                try {
                                    const response = await fetch(event.data.url);
                                    const html = await response.text();
                                    window.parent.postMessage({
                                        type: 'crawlResult',
                                        success: true,
                                        url: event.data.url,
                                        content: html
                                    }, '*');
                                } catch (error) {
                                    window.parent.postMessage({
                                        type: 'crawlResult', 
                                        success: false,
                                        error: error.message
                                    }, '*');
                                }
                            }
                        });
                    </script>
                </head>
                <body></body>
                </html>
            `;
            
            const timeout = setTimeout(() => {
                document.body.removeChild(iframe);
                reject(new Error('Timeout'));
            }, 10000);

            window.addEventListener('message', (event) => {
                if (event.data.type === 'crawlResult') {
                    clearTimeout(timeout);
                    document.body.removeChild(iframe);
                    
                    if (event.data.success) {
                        resolve({
                            content: event.data.content,
                            finalUrl: event.data.url
                        });
                    } else {
                        reject(new Error(event.data.error));
                    }
                }
            });

            document.body.appendChild(iframe);
            iframe.contentWindow.postMessage({ type: 'crawl', url }, '*');
        });
    }

    async isJavascriptSite(url) {
        try {
            const response = await fetch(`https://corsproxy.io/?${encodeURIComponent(url)}`);
            const html = await response.text();
            return html.includes('<script') && 
                  (html.includes('react') || html.includes('vue') || html.includes('angular'));
        } catch {
            return false;
        }
    }

    extractUrlsFromHtml(html, baseUrl) {
        const urls = new Set();
        const patterns = [
            /<a\s+(?:[^>]*?\s+)?href=(["'])(.*?)\1/gi,
            /<link\s+(?:[^>]*?\s+)?href=(["'])(.*?)\1/gi,
            /<img\s+(?:[^>]*?\s+)?src=(["'])(.*?)\1/gi,
            /<script\s+(?:[^>]*?\s+)?src=(["'])(.*?)\1/gi,
            /<iframe\s+(?:[^>]*?\s+)?src=(["'])(.*?)\1/gi
        ];

        patterns.forEach(pattern => {
            let match;
            while ((match = pattern.exec(html)) !== null) {
                const href = match[2];
                if (href) {
                    try {
                        const absoluteUrl = new URL(href, baseUrl).href;
                        urls.add(absoluteUrl);
                    } catch (e) {
                        // Ignore invalid URLs
                    }
                }
            }
        });

        return Array.from(urls);
    }

    processNewUrls(newUrls, baseUrl) {
        newUrls.forEach(url => {
            this.stats.totalDiscovered++;
            
            const normalizedUrl = this.normalizeUrl(url);
            
            if (!this.isSameDomain(normalizedUrl, baseUrl)) {
                this.stats.external++;
                return;
            }

            if (this.visitedUrls.has(normalizedUrl) || 
                this.urlsToCrawl.has(normalizedUrl) ||
                this.failedUrls.has(normalizedUrl)) {
                this.stats.duplicates++;
                return;
            }

            if (this.shouldCrawlUrl(normalizedUrl)) {
                this.urlsToCrawl.add(normalizedUrl);
                this.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${normalizedUrl}`, 'discover');
            }
        });
    }

    normalizeUrl(url) {
        try {
            const urlObj = new URL(url);
            urlObj.protocol = urlObj.protocol.toLowerCase();
            urlObj.hostname = urlObj.hostname.toLowerCase().replace(/^www\./, '');
            urlObj.hash = '';
            
            urlObj.pathname = urlObj.pathname
                .replace(/\/+/g, '/')
                .replace(/\/$/, '') || '/';
            
            if (urlObj.search) {
                const params = new URLSearchParams(urlObj.search);
                const importantParams = new URLSearchParams();
                
                for (const [key, value] of params) {
                    if (!key.match(/^(utm_|fbclid|gclid|msclkid|trk_|ref|source)/i)) {
                        importantParams.append(key, value);
                    }
                }
                
                urlObj.search = importantParams.toString();
            }
            
            return urlObj.href;
        } catch (error) {
            return url;
        }
    }

    shouldCrawlUrl(url) {
        if (!this.isValidPageUrl(url)) return false;
        if (this.visitedUrls.size >= this.config.maxPages) return false;
        
        const excludedPaths = ['/admin', '/login', '/logout', '/register', '/api/'];
        const urlLower = url.toLowerCase();
        return !excludedPaths.some(path => urlLower.includes(path));
    }

    isValidPageUrl(url) {
        try {
            const urlObj = new URL(url);
            const excludedExtensions = ['.pdf', '.jpg', '.jpeg', '.png', '.gif', '.zip'];
            const pathname = urlObj.pathname.toLowerCase();
            
            if (excludedExtensions.some(ext => pathname.endsWith(ext))) {
                return false;
            }
            
            if (['mailto:', 'tel:', 'javascript:', 'ftp:', 'data:'].some(proto => 
                url.toLowerCase().startsWith(proto))) {
                return false;
            }
            
            return ['http:', 'https:'].includes(urlObj.protocol);
            
        } catch (error) {
            return false;
        }
    }

    isSameDomain(url, baseUrl) {
        try {
            return new URL(url).hostname === new URL(baseUrl).hostname;
        } catch {
            return false;
        }
    }

    isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    updateProgress() {
        const totalProcessed = this.visitedUrls.size + this.failedUrls.size;
        const progress = (totalProcessed / this.config.maxPages) * 100;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        if (typeof updateUI === 'function') {
            updateUI({
                progress: Math.min(progress, 100),
                stats: this.stats,
                visited: this.visitedUrls.size,
                queued: this.urlsToCrawl.size,
                failed: this.failedUrls.size
            });
        }
    }

    log(message, type = 'info') {
        if (typeof addLog === 'function') {
            addLog(message, type);
        }
    }

    completeCrawling() {
        this.isCrawling = false;
        this.log('‚úÖ –°–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω!', 'success');
        this.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, 'success');
        this.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${this.visitedUrls.size} —Å—Ç—Ä–∞–Ω–∏—Ü`, 'success');
        this.log(`   ‚ùå –û—à–∏–±–∫–∏: ${this.failedUrls.size} —Å—Ç—Ä–∞–Ω–∏—Ü`, 'success');
        this.log(`   üîÑ –î—É–±–ª–∏–∫–∞—Ç–æ–≤: ${this.stats.duplicates}`, 'success');
        
        if (typeof showResults === 'function') {
            showResults(this.getResults());
        }
    }

    stopCrawling() {
        this.isCrawling = false;
        this.isPaused = false;
        this.log('‚èπÔ∏è –°–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'warning');
    }

    togglePause() {
        this.isPaused = !this.isPaused;
        this.log(this.isPaused ? '‚è∏Ô∏è –ü–∞—É–∑–∞' : '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–æ', 'info');
    }

    resetState() {
        this.visitedUrls.clear();
        this.urlsToCrawl.clear();
        this.failedUrls.clear();
        this.stats = {
            totalDiscovered: 0,
            successfullyCrawled: 0,
            failed: 0,
            duplicates: 0,
            external: 0
        };
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    getResults() {
        return {
            urls: Array.from(this.visitedUrls).sort(),
            stats: this.stats,
            failedUrls: Array.from(this.failedUrls),
            totalPages: this.visitedUrls.size
        };
    }

    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –∫—Ä–∞—É–ª–µ—Ä–∞
const professionalCrawler = new ProfessionalWebCrawler();

// UI —Ñ—É–Ω–∫—Ü–∏–∏
function updateUI(data) {
    const progressFill = document.getElementById('progressFill');
    const progressInfo = document.getElementById('progressInfo');
    const statsGrid = document.getElementById('statsGrid');
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    progressFill.style.width = data.progress + '%';
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    progressInfo.innerHTML = `
        <strong>${data.visited}</strong> –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ | 
        <strong>${data.queued}</strong> –≤ –æ—á–µ—Ä–µ–¥–∏ | 
        <strong>${data.failed}</strong> –æ—à–∏–±–æ–∫
    `;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    statsGrid.innerHTML = `
        <div class="stat-card">
            <div class="stat-number">${data.visited}</div>
            <div class="stat-label">–£—Å–ø–µ—à–Ω–æ</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${data.queued}</div>
            <div class="stat-label">–í –æ—á–µ—Ä–µ–¥–∏</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${data.failed}</div>
            <div class="stat-label">–û—à–∏–±–∫–∏</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${data.stats.duplicates}</div>
            <div class="stat-label">–î—É–±–ª–∏–∫–∞—Ç—ã</div>
        </div>
    `;
}

function addLog(message, type = 'info') {
    const logElement = document.getElementById('log');
    const timestamp = new Date().toLocaleTimeString();
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry log-${type}`;
    logEntry.innerHTML = `<span class="log-time">[${timestamp}]</span> ${message}`;
    logElement.appendChild(logEntry);
    logElement.scrollTop = logElement.scrollHeight;
}

function showResults(results) {
    document.getElementById('progressSection').style.display = 'none';
    document.getElementById('resultsSection').style.display = 'block';
    
    const statsHtml = `
        <div class="final-stats">
            <div class="stat-item">‚úÖ <strong>–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ:</strong> ${results.totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü</div>
            <div class="stat-item">‚ùå <strong>–û—à–∏–±–∫–∏:</strong> ${results.failedUrls.length} —Å—Ç—Ä–∞–Ω–∏—Ü</div>
            <div class="stat-item">üîÑ <strong>–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:</strong> ${results.stats.duplicates}</div>
            <div class="stat-item">üåê <strong>–í–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫:</strong> ${results.stats.external}</div>
        </div>
    `;
    
    document.getElementById('resultsStats').innerHTML = statsHtml;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
function startCrawling() {
    const url = document.getElementById('urlInput').value.trim();
    const maxPages = parseInt(document.getElementById('maxPages').value) || 500;
    const delay = parseInt(document.getElementById('delay').value) || 200;
    const usePuppeteer = document.getElementById('usePuppeteer').checked;
    
    if (!url) {
        showError('–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞');
        return;
    }
    
    // –°–±—Ä–æ—Å UI
    document.getElementById('error').textContent = '';
    document.getElementById('progressSection').style.display = 'block';
    document.getElementById('resultsSection').style.display = 'none';
    document.getElementById('crawlBtn').style.display = 'none';
    document.getElementById('stopBtn').style.display = 'inline-block';
    document.getElementById('pauseBtn').style.display = 'inline-block';
    document.getElementById('log').innerHTML = '';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    professionalCrawler.updateConfig({ maxPages, delay, usePuppeteer });
    
    // –ó–∞–ø—É—Å–∫
    professionalCrawler.startCrawling(url).catch(error => {
        showError(error.message);
    });
}

function stopCrawling() {
    professionalCrawler.stopCrawling();
    document.getElementById('crawlBtn').style.display = 'inline-block';
    document.getElementById('stopBtn').style.display = 'none';
    document.getElementById('pauseBtn').style.display = 'none';
}

function togglePause() {
    professionalCrawler.togglePause();
    const pauseBtn = document.getElementById('pauseBtn');
    pauseBtn.textContent = professionalCrawler.isPaused ? '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '‚è∏Ô∏è –ü–∞—É–∑–∞';
}

function showError(message) {
    document.getElementById('error').textContent = message;
    addLog(`‚ùå ${message}`, 'error');
}

function exportCSV() {
    const results = professionalCrawler.getResults();
    const csvContent = ['URL', ...results.urls].join('\n');
    downloadFile(csvContent, 'crawled_pages.csv', 'text/csv');
}

function exportJSON() {
    const results = professionalCrawler.getResults();
    const jsonContent = JSON.stringify(results, null, 2);
    downloadFile(jsonContent, 'crawled_pages.json', 'application/json');
}

function exportTXT() {
    const results = professionalCrawler.getResults();
    const txtContent = results.urls.join('\n');
    downloadFile(txtContent, 'crawled_pages.txt', 'text/plain');
}

function downloadFile(content, filename, mimeType) {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    addLog(`üì• –§–∞–π–ª ${filename} —Å–∫–∞—á–∞–Ω`, 'success');
}

function viewResults() {
    const results = professionalCrawler.getResults();
    const urlsContainer = document.getElementById('urlsContainer');
    const urlsList = document.getElementById('urlsList');
    
    urlsContainer.innerHTML = '';
    results.urls.forEach(url => {
        const urlElement = document.createElement('div');
        urlElement.className = 'url-item';
        urlElement.innerHTML = `<a href="${url}" target="_blank">${url}</a>`;
        urlsContainer.appendChild(urlElement);
    });
    
    urlsList.style.display = 'block';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.getElementById('urlInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') startCrawling();
});
